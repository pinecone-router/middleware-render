{"version":3,"file":"index.module.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["/**\n * This will replace the content fetched from `path` into `selector`.\n * The content is assumed to not be an entire html page but a chunk of it.\n * @param {string} content the html content.\n * @param {string} selector the selector of where to put the content.\n */\nfunction renderContent(content, selector) {\n\t// replace the content of the selector with the fetched content\n\tdocument.querySelector(selector).innerHTML = content;\n}\n\n/**\n * This takes the document fetched, and check if it have any routers.\n * @param {Document} doc\n * @param {string} selector\n * @param {array} routes\n * @returns {object} {doc, routes}\n */\nexport function processRoutersInFetchedDoc(doc, selector, routes) {\n\tlet routersInDoc = doc.querySelectorAll('[x-router]');\n\tswitch (routersInDoc.length) {\n\t\tcase 0:\n\t\t\t// if there is no router in the fetched doc, remove the routes registered\n\t\t\t// but only if the selector is body\n\t\t\tif (selector == 'body') routes = [];\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\t// the router currently loaded\n\t\t\tlet currentRouter = document.querySelector('[x-router]');\n\t\t\t// if the router in the doc dont have x-router set to 'loaded'\n\t\t\t// thus remove it from the current router element before checking if they're the same\n\t\t\tcurrentRouter.setAttribute('x-router', '');\n\t\t\t// check if the one in fetched doc is the same as the current one\n\t\t\tif (\n\t\t\t\troutersInDoc[0].isEqualNode(\n\t\t\t\t\tdocument.querySelector('[x-router]')\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// if it is, mark the router as loaded, so routes wont be processed again\n\t\t\t\troutersInDoc[0].setAttribute('x-router', 'loaded');\n\t\t\t\t// remove the router element currently in the page, in case it is not within the selector.\n\t\t\t\tdocument.querySelector('[x-router]').remove();\n\t\t\t} else {\n\t\t\t\t// if they're not the same remove the routes, the new ones will be added once this new router is added\n\t\t\t\troutes = [];\n\t\t\t\tdocument.querySelector('[x-router]').remove();\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// more than one\n\t\t\tthrow new Error(\n\t\t\t\t'Pinecone Router x-render: there can only be one router in the same page'\n\t\t\t);\n\t}\n\n\treturn { doc, routes };\n}\n\n/**\n * This will replace the content fetched from `path` into `selector`.\n * Unlike renderContent, this will assume the fetched content to be an entire HTML.\n * meaning it needs to process the routes as well.\n * @param {string} content the html content.\n * @param {string} selector the selector of where to put the content.\n * @param {array} routes routes array to be processed.\n * @returns {array} processed routes\n */\nexport function renderPage(content, selector, routes) {\n\tlet doc = new DOMParser().parseFromString(content, 'text/html');\n\tdoc = doc.querySelector(selector);\n\t// This takes the document fetched, remove routers already initialized from it\n\t// and also remove routers initialized but not found in it\n\t// that is for routers that are not needed in this page.\n\tlet r = processRoutersInFetchedDoc(doc, selector, routes);\n\tdoc = r.doc;\n\tcontent = doc.innerHTML;\n\trenderContent(content, selector);\n\twindow.PineconeRouter.routes = r.routes;\n}\n","import { renderPage } from './utils.js';\n\nconst PineconeRouterMiddleware = {\n\t/**\n\t * @property {string} version the version of this middleware.\n\t */\n\tversion: '0.0.3',\n\t/**\n\t * @property {string} name the name of the middleware.\n\t */\n\tname: 'render',\n\t/**\n\t * @property {object} settings the middleware settings.\n\t */\n\tsettings: {\n\t\tenable: false,\n\t\tselector: 'body',\n\t\tpreload: true,\n\t\t/**\n\t\t * @type {number} milliseconds\n\t\t * @summary time to wait after mouse over a link before preloading a page\n\t\t */\n\t\tpreloadTime: 200,\n\t\t/**\n\t\t * @type {object}\n\t\t * @summary The content that has been preloaded on mouseover event.\n\t\t */\n\t\tpreloaded: { path: '', content: null },\n\t},\n\n\t/**\n\t * @event pinecone-start\n\t * @summary be dispatched to the window after before page start loading.\n\t */\n\tloadStart: new Event('pinecone-start'),\n\n\t/**\n\t * @event pinecone-end\n\t * @summary will be dispatched to the window after the views are fetched\n\t */\n\tloadEnd: new Event('pinecone-end'),\n\n\t/**\n\t * This will be called at router initialization.\n\t * used for detecting router settings.\n\t * @param {object} component the router's alpine component.\n\t */\n\tinit(component, settings) {\n\t\tif (settings?.middlewares?.views) {\n\t\t\tthrow new Error(\n\t\t\t\t`Pinecone Router ${this.name}: Cannot use views middleware along with render.`\n\t\t\t);\n\t\t}\n\n\t\t//load settings\n\t\tthis.settings = {\n\t\t\t...this.settings,\n\t\t\t...(settings?.middlewares?.[this.name] ?? {}),\n\t\t};\n\n\t\tif (this.settings?.enable) {\n\t\t\tif (settings.hash) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Pinecone Router ${this.name}: Cannot use x-render along with x-hash.`\n\t\t\t\t);\n\t\t\t}\n\t\t\twindow.PineconeRouter.settings.allowNoHandler = true;\n\t\t\tcomponent.$el.setAttribute('x-router', 'loaded');\n\t\t\tif (this.settings.preload) this.interceptLinks(settings.hash);\n\t\t}\n\t},\n\n\t/**\n\t * This will intercept links for mouse hover\n\t */\n\tinterceptLinks(hash) {\n\t\tvar t = this;\n\t\tdocument.body.addEventListener('onmouseover', function (e) {\n\t\t\t// ensure link\n\t\t\t// use shadow dom when available if not, fall back to composedPath()\n\t\t\t// for browsers that only have shady\n\t\t\tlet el = e.target;\n\n\t\t\tlet eventPath =\n\t\t\t\te.path || (e.composedPath ? e.composedPath() : null);\n\n\t\t\tif (eventPath) {\n\t\t\t\tfor (let i = 0; i < eventPath.length; i++) {\n\t\t\t\t\tif (!eventPath[i].nodeName) continue;\n\t\t\t\t\tif (eventPath[i].nodeName.toUpperCase() !== 'A') continue;\n\t\t\t\t\tif (!eventPath[i].href) continue;\n\n\t\t\t\t\tel = eventPath[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// allow skipping handler\n\t\t\tif (el.hasAttribute('native')) return;\n\n\t\t\t// check if the link is a navigation/relative link\n\t\t\tvar check = window.PineconeRouter.validLink(el, hash);\n\t\t\tif (!check.valid) return;\n\t\t\tif (t.settings.preloaded.path == check.link) return;\n\n\t\t\twindow.setTimeout(function () {\n\t\t\t\tfetch(check.link)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\treturn response.text();\n\t\t\t\t\t})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tt.settings.preloaded.path = path;\n\t\t\t\t\t\tt.settings.preloaded.content = response;\n\t\t\t\t\t});\n\t\t\t}, t.settings.preloadTime);\n\t\t});\n\t},\n\n\t/**\n\t * Will be called after the handlers are executed and done.\n\t * during navigation inside PineconeRouter.navigate().\n\t * @param {object} _route the matched route, null if not found.\n\t * @param {string} path the path visited by the client\n\t * @param {boolean} firstload first page load and not link navigation request\n\t * @param {boolean} notfound set to true if the route wasn't found\n\t * @returns {boolean} false to make the navigate function exit (make sure to send the loadend event); none to continue execution.\n\t */\n\tonHandlersExecuted(_route, path, firstload, notfound) {\n\t\t// if using page rendering and the user just (re)loaded the page\n\t\t// dont fetch the content as it is already loaded\n\t\tif (this.settings.enable && !firstload && !notfound) {\n\t\t\tif (this.settings.preloaded.path == path) {\n\t\t\t\trenderPage(\n\t\t\t\t\tthis.settings.preloaded.content,\n\t\t\t\t\tthis.settings.selector,\n\t\t\t\t\twindow.PineconeRouter.routes\n\t\t\t\t);\n\t\t\t\tthis.settings.preloaded.path = null;\n\t\t\t\tthis.settings.preloaded.content = null;\n\t\t\t\twindow.dispatchEvent(this.loadEnd);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tfetch(path)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\treturn response.text();\n\t\t\t\t\t})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\trenderPage(\n\t\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t\tthis.settings.selector,\n\t\t\t\t\t\t\twindow.PineconeRouter.routes\n\t\t\t\t\t\t);\n\t\t\t\t\t\t//this.interceptLinks();\n\t\t\t\t\t\twindow.dispatchEvent(this.loadEnd);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n\n\tonBeforeHandlersExecuted(_route, _path, _firstLoad, _notFound) {\n\t\twindow.dispatchEvent(this.loadStart);\n\t},\n};\n\nif (window.PineconeRouterMiddlewares == null)\n\twindow.PineconeRouterMiddlewares = [PineconeRouterMiddleware];\nelse window.PineconeRouterMiddlewares.push(PineconeRouterMiddleware);\n"],"names":["renderPage","content","selector","routes","doc","DOMParser","parseFromString","querySelector","r","routersInDoc","querySelectorAll","length","document","setAttribute","isEqualNode","remove","Error","processRoutersInFetchedDoc","innerHTML","renderContent","window","PineconeRouter","PineconeRouterMiddleware","version","name","settings","enabled","preload","preloadTime","preloaded","path","loadStart","Event","loadEnd","init","component","middlewares","_settings$middlewares","views","this","_settings$middlewares3","_this$settings","hash","allowNoHandler","$el","interceptLinks","t","body","addEventListener","e","el","target","eventPath","composedPath","i","nodeName","toUpperCase","href","hasAttribute","check","validLink","valid","link","setTimeout","fetch","then","response","text","onHandlersExecuted","_route","firstload","notfound","dispatchEvent","onBeforeHandlersExecuted","_path","_firstLoad","_notFound","PineconeRouterMiddlewares","push"],"mappings":"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"}